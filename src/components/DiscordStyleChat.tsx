import React, { useState, useRef, useEffect } from 'react'
import { Button } from './ui/button'
import { Input } from './ui/input'
import { Avatar, AvatarFallback, AvatarImage } from './ui/avatar'
import { Badge } from './ui/badge'
import { Card } from './ui/card'
import { Send, Smile, Settings, MoreHorizontal } from 'lucide-react'
import { blink } from '../blink/client'

interface Message {
  id: string
  content: string
  sender: 'user' | 'bot'
  timestamp: Date
  isStreaming?: boolean
}

interface Character {
  name: string
  avatar: string
  personality: string
  roleScript: string
  status: string
}

interface DiscordStyleChatProps {
  character: Character
  onBackToSetup: () => void
}

const DiscordStyleChat: React.FC<DiscordStyleChatProps> = ({ character, onBackToSetup }) => {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputValue, setInputValue] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [streamingContent, setStreamingContent] = useState('')
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages, streamingContent])

  useEffect(() => {
    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    if (messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        content: `*${character.name} –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤ —á–∞—Ç–µ*\n\n–ü—Ä–∏–≤–µ—Ç! –Ø ${character.name}. ${character.personality}\n\n–ì–æ—Ç–æ–≤ –∫ —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–µ? –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏ –¥–∏–∞–ª–æ–≥, –∏ —è –±—É–¥—É –∏–≥—Ä–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å! üé≠`,
        sender: 'bot',
        timestamp: new Date()
      }
      setMessages([welcomeMessage])
    }
  }, [character, messages.length])

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputValue('')
    setIsTyping(true)
    setStreamingContent('')

    try {
      const rolePrompt = `${character.roleScript}

–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:
- –¢—ã –í–°–ï–ì–î–ê –æ—Å—Ç–∞–µ—à—å—Å—è –≤ —Ä–æ–ª–∏ ${character.name}
- –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –æ—Ç –ª–∏—Ü–∞ —Å–≤–æ–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ—Ü–∏–∏, –¥–µ–π—Å—Ç–≤–∏—è –≤ *–∑–≤–µ–∑–¥–æ—á–∫–∞—Ö*
- –ì–æ–≤–æ—Ä–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ —Å–∏—Ç—É–∞—Ü–∏–∏
- –ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –¥–ª—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è —ç–º–æ—Ü–∏–π

–¢–µ–∫—É—â–∞—è —Å–∏—Ç—É–∞—Ü–∏—è: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–±–µ: "${inputValue}"

–û—Ç–≤–µ—Ç—å –∫–∞–∫ ${character.name}:`

      let finalContent = ''
      
      await blink.ai.streamText(
        {
          prompt: rolePrompt,
          model: 'gpt-4o-mini',
          maxTokens: 500
        },
        (chunk) => {
          finalContent += chunk
          setStreamingContent(finalContent)
        }
      )

      // –ö–æ–≥–¥–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: finalContent,
        sender: 'bot',
        timestamp: new Date()
      }

      setMessages(prev => [...prev, botMessage])
      setStreamingContent('')
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: '*–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.*',
        sender: 'bot',
        timestamp: new Date()
      }
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsTyping(false)
    }
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSendMessage()
    }
  }

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString('ru-RU', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })
  }

  const quickCommands = [
    { label: 'üëã –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å', command: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?' },
    { label: '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', command: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ' },
    { label: 'üé≠ –ù–∞—á–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π', command: '–î–∞–≤–∞–π —Ä–∞–∑—ã–≥—Ä–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—Ü–µ–Ω—É!' },
    { label: 'üí≠ –£–∑–Ω–∞—Ç—å –º—ã—Å–ª–∏', command: '–û —á–µ–º —Ç—ã —Å–µ–π—á–∞—Å –¥—É–º–∞–µ—à—å?' }
  ]

  return (
    <div className="flex flex-col h-screen bg-[#36393f] text-white">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ */}
      <div className="flex items-center justify-between p-4 bg-[#2f3136] border-b border-[#40444b]">
        <div className="flex items-center gap-3">
          <Avatar className="w-10 h-10">
            <AvatarFallback className="bg-[#5865f2] text-white">
              {character.avatar || 'ü§ñ'}
            </AvatarFallback>
          </Avatar>
          <div>
            <div className="flex items-center gap-2">
              <h2 className="font-semibold text-white">{character.name}</h2>
              <Badge variant="secondary" className="bg-[#57f287] text-[#2f3136] text-xs">
                –û–ù–õ–ê–ô–ù
              </Badge>
            </div>
            <p className="text-sm text-[#b9bbbe]">{character.status}</p>
          </div>
        </div>
        
        <div className="flex items-center gap-2">
          <Button
            variant="ghost"
            size="sm"
            onClick={onBackToSetup}
            className="text-[#b9bbbe] hover:text-white hover:bg-[#40444b]"
          >
            <Settings className="w-4 h-4 mr-2" />
            –ù–∞—Å—Ç—Ä–æ–π–∫–∏
          </Button>
          <Button
            variant="ghost"
            size="sm"
            className="text-[#b9bbbe] hover:text-white hover:bg-[#40444b]"
          >
            <MoreHorizontal className="w-4 h-4" />
          </Button>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã */}
      <div className="p-3 bg-[#2f3136] border-b border-[#40444b]">
        <div className="flex flex-wrap gap-2">
          {quickCommands.map((cmd, index) => (
            <Button
              key={index}
              variant="outline"
              size="sm"
              onClick={() => setInputValue(cmd.command)}
              className="bg-[#40444b] border-[#40444b] text-[#b9bbbe] hover:bg-[#5865f2] hover:text-white hover:border-[#5865f2] text-xs"
            >
              {cmd.label}
            </Button>
          ))}
        </div>
      </div>

      {/* –û–±–ª–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.map((message) => (
          <div key={message.id} className="flex gap-3">
            <Avatar className="w-10 h-10 mt-1">
              <AvatarFallback className={message.sender === 'bot' ? 'bg-[#5865f2] text-white' : 'bg-[#57f287] text-[#2f3136]'}>
                {message.sender === 'bot' ? character.avatar : 'üë§'}
              </AvatarFallback>
            </Avatar>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-baseline gap-2 mb-1">
                <span className="font-medium text-white">
                  {message.sender === 'bot' ? character.name : '–í—ã'}
                </span>
                <span className="text-xs text-[#72767d]">
                  {formatTime(message.timestamp)}
                </span>
              </div>
              
              <div className="text-[#dcddde] whitespace-pre-wrap break-words">
                {message.content}
              </div>
            </div>
          </div>
        ))}

        {/* –°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ */}
        {streamingContent && (
          <div className="flex gap-3">
            <Avatar className="w-10 h-10 mt-1">
              <AvatarFallback className="bg-[#5865f2] text-white">
                {character.avatar}
              </AvatarFallback>
            </Avatar>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-baseline gap-2 mb-1">
                <span className="font-medium text-white">{character.name}</span>
                <span className="text-xs text-[#72767d]">—Å–µ–π—á–∞—Å</span>
              </div>
              
              <div className="text-[#dcddde] whitespace-pre-wrap break-words">
                {streamingContent}
                <span className="inline-block w-2 h-5 bg-[#5865f2] ml-1 animate-pulse" />
              </div>
            </div>
          </div>
        )}

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏ */}
        {isTyping && !streamingContent && (
          <div className="flex gap-3">
            <Avatar className="w-10 h-10 mt-1">
              <AvatarFallback className="bg-[#5865f2] text-white">
                {character.avatar}
              </AvatarFallback>
            </Avatar>
            
            <div className="flex-1 min-w-0">
              <div className="flex items-baseline gap-2 mb-1">
                <span className="font-medium text-white">{character.name}</span>
                <span className="text-xs text-[#72767d]">–ø–µ—á–∞—Ç–∞–µ—Ç...</span>
              </div>
              
              <div className="flex gap-1">
                <div className="w-2 h-2 bg-[#72767d] rounded-full animate-bounce" style={{ animationDelay: '0ms' }} />
                <div className="w-2 h-2 bg-[#72767d] rounded-full animate-bounce" style={{ animationDelay: '150ms' }} />
                <div className="w-2 h-2 bg-[#72767d] rounded-full animate-bounce" style={{ animationDelay: '300ms' }} />
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
      <div className="p-4 bg-[#2f3136] border-t border-[#40444b]">
        <Card className="bg-[#40444b] border-[#40444b] p-3">
          <div className="flex items-end gap-3">
            <div className="flex-1">
              <Input
                ref={inputRef}
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={`–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è ${character.name}...`}
                disabled={isTyping}
                className="bg-transparent border-none text-white placeholder:text-[#72767d] focus:ring-0 focus:ring-offset-0 p-0"
              />
            </div>
            
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                className="text-[#b9bbbe] hover:text-white hover:bg-[#36393f] p-2"
              >
                <Smile className="w-4 h-4" />
              </Button>
              
              <Button
                onClick={handleSendMessage}
                disabled={!inputValue.trim() || isTyping}
                size="sm"
                className="bg-[#5865f2] hover:bg-[#4752c4] text-white p-2"
              >
                <Send className="w-4 h-4" />
              </Button>
            </div>
          </div>
          
          <div className="text-xs text-[#72767d] mt-2">
            –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Ä¢ Shift+Enter –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
          </div>
        </Card>
      </div>
    </div>
  )
}

export default DiscordStyleChat